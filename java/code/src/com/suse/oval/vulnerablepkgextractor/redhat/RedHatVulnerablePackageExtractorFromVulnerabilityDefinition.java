package com.suse.oval.vulnerablepkgextractor.redhat;

import com.suse.oval.OsFamily;
import com.suse.oval.cpe.Cpe;
import com.suse.oval.cpe.CpeBuilder;
import com.suse.oval.ovaltypes.Advisory;
import com.suse.oval.ovaltypes.DefinitionClassEnum;
import com.suse.oval.ovaltypes.DefinitionType;
import com.suse.oval.vulnerablepkgextractor.ProductVulnerablePackages;
import com.suse.oval.vulnerablepkgextractor.VulnerablePackage;
import com.suse.oval.vulnerablepkgextractor.VulnerablePackagesExtractor;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class RedHatVulnerablePackageExtractorFromVulnerabilityDefinition implements VulnerablePackagesExtractor {
    private final DefinitionType vulnerabilityDefinition;

    public RedHatVulnerablePackageExtractorFromVulnerabilityDefinition(DefinitionType vulnerabilityDefinition) {
        this.vulnerabilityDefinition = vulnerabilityDefinition;
        assertDefinitionIsValid();
    }

    @Override
    public List<ProductVulnerablePackages> extract() {
        ProductVulnerablePackages productVulnerablePackages = new ProductVulnerablePackages();

        List<VulnerablePackage> vulnerablePackages = vulnerabilityDefinition.getMetadata().getAdvisory()
                .map(Advisory::getAffectedComponents).orElse(Collections.emptyList())
                .stream().map(this::toVulnerablePackage)
                .collect(Collectors.toList());

        Cpe vulnerableProductCpe = new CpeBuilder()
                .withVendor("redhat")
                .withProduct("enterprise_linux")
                .withVersion(vulnerabilityDefinition.getOsVersion()).build();

        String cve = vulnerabilityDefinition.getCve();

        productVulnerablePackages.setVulnerablePackages(vulnerablePackages);
        productVulnerablePackages.setProductCpe(vulnerableProductCpe.asString());
        productVulnerablePackages.setCve(cve);

        return List.of(productVulnerablePackages);
    }

    private VulnerablePackage toVulnerablePackage(String affectedPackage) {
        VulnerablePackage vulnerablePackage = new VulnerablePackage();
        vulnerablePackage.setName(affectedPackage);
        vulnerablePackage.setFixVersion(null);
        return vulnerablePackage;
    }

    private void assertDefinitionIsValid() {
        assert vulnerabilityDefinition.getDefinitionClass() == DefinitionClassEnum.VULNERABILITY &&
                vulnerabilityDefinition.getOsFamily() == OsFamily.REDHAT_ENTERPRISE_LINUX;

        // Clients should filter out unaffected definitions because there is no point of extracting vulnerable packages
        // from unaffected definitions
        assert !vulnerabilityDefinition.getId().contains("unaffected");
    }

}

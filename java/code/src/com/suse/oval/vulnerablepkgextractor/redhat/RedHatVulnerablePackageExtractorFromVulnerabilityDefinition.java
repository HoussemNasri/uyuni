package com.suse.oval.vulnerablepkgextractor.redhat;

import com.suse.oval.OsFamily;
import com.suse.oval.ovaltypes.Advisory;
import com.suse.oval.ovaltypes.DefinitionClassEnum;
import com.suse.oval.ovaltypes.DefinitionType;
import com.suse.oval.vulnerablepkgextractor.ProductVulnerablePackages;
import com.suse.oval.vulnerablepkgextractor.VulnerablePackage;
import com.suse.oval.vulnerablepkgextractor.VulnerablePackagesExtractor;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Vulnerable packages extractor for vulnerability definitions
 * from: <a href="https://www.redhat.com/security/data/oval/v2/">RedHat OVAL</a>
 */
public class RedHatVulnerablePackageExtractorFromVulnerabilityDefinition implements VulnerablePackagesExtractor {
    private static Logger LOG = LogManager.getLogger(RedHatVulnerablePackageExtractorFromVulnerabilityDefinition.class);
    private final DefinitionType vulnerabilityDefinition;

    public RedHatVulnerablePackageExtractorFromVulnerabilityDefinition(DefinitionType vulnerabilityDefinition) {
        this.vulnerabilityDefinition = vulnerabilityDefinition;
        assertDefinitionIsValid(vulnerabilityDefinition);
    }

    @Override
    public List<ProductVulnerablePackages> extract() {
        List<VulnerablePackage> vulnerablePackages = vulnerabilityDefinition.getMetadata().getAdvisory()
                .map(Advisory::getAffectedComponents).orElse(Collections.emptyList())
                .stream().map(this::toVulnerablePackage)
                .collect(Collectors.toList());

        String cve = vulnerabilityDefinition.getSingleCve().orElseThrow();

        List<String> affectedCpeList =
                vulnerabilityDefinition.getMetadata().getAdvisory().map(Advisory::getAffectedCpeList)
                        .orElse(Collections.emptyList());

        if (affectedCpeList.isEmpty()) {
            LOG.warn("RedHat affected CPE list is not meant to be empty");
        }

        List<ProductVulnerablePackages> result = new ArrayList<>();
        for (String affectedCpe : affectedCpeList) {
            // o implies 'operating system', the OVAL could also describe applications
            if (!affectedCpe.startsWith("cpe:/o:")) {
                continue;
            }
            ProductVulnerablePackages productVulnerablePackages = new ProductVulnerablePackages();
            productVulnerablePackages.setProductCpe(affectedCpe);
            productVulnerablePackages.setVulnerablePackages(vulnerablePackages);
            productVulnerablePackages.setSingleCve(cve);

            result.add(productVulnerablePackages);
        }

        return result;
    }

    @Override
    public void assertDefinitionIsValid(DefinitionType definition) {
        assert vulnerabilityDefinition.getDefinitionClass() == DefinitionClassEnum.VULNERABILITY;
        assert vulnerabilityDefinition.getOsFamily() == OsFamily.REDHAT_ENTERPRISE_LINUX;

        // Clients should filter out unaffected definitions because there is no point of extracting vulnerable packages
        // from unaffected definitions
        assert !vulnerabilityDefinition.getId().contains("unaffected");
    }

    private VulnerablePackage toVulnerablePackage(String affectedPackage) {
        VulnerablePackage vulnerablePackage = new VulnerablePackage();
        vulnerablePackage.setName(affectedPackage);
        vulnerablePackage.setFixVersion(null);
        return vulnerablePackage;
    }

}

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.1 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.06.01 at 01:02:18 PM CET 
//


package com.suse.oval.ovaltypes;

import com.suse.oval.TestEvaluator;

import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.List;


/**
 * The required operator attribute provides the logical operator that binds the different statements inside a criteria together.
 * The optional negate attribute signifies that the result of the criteria as a whole should be negated during analysis.
 * For example, consider a criteria that evaluates to TRUE if certain software is installed.
 * <p>
 * By negating this test, it now evaluates to TRUE if the software is NOT installed. The optional comment attribute provides
 * a short description of the criteria.
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CriteriaType", namespace = "http://oval.mitre.org/XMLSchema/oval-definitions-5")
public class CriteriaType implements BaseCriteria {

    @XmlElements({
            @XmlElement(name = "criteria", namespace = "http://oval.mitre.org/XMLSchema/oval-definitions-5", type = CriteriaType.class),
            @XmlElement(name = "criterion", namespace = "http://oval.mitre.org/XMLSchema/oval-definitions-5", type = CriterionType.class)
    })
    protected List<BaseCriteria> children;
    @XmlAttribute(name = "operator")
    protected LogicOperatorType operator;
    @XmlAttribute(name = "negate")
    protected Boolean negate;
    @XmlAttribute(name = "comment")
    protected String comment;

    /**
     * Gets the value of the contained criteria or criterion objects.
     */
    public List<BaseCriteria> getChildren() {
        if (children == null) {
            children = new ArrayList<>();
        }
        return this.children;
    }

    /**
     * Gets the value of the operator property.
     *
     * @return possible object is
     * {@link LogicOperatorType }
     */
    public LogicOperatorType getOperator() {
        if (operator == null) {
            return LogicOperatorType.AND;
        } else {
            return operator;
        }
    }

    /**
     * Sets the value of the operator property.
     *
     * @param value allowed object is
     *              {@link LogicOperatorType }
     */
    public void setOperator(LogicOperatorType value) {
        this.operator = value;
    }

    /**
     * Gets the value of the negate property.
     */
    public boolean isNegate() {
        if (negate == null) {
            return false;
        } else {
            return negate;
        }
    }

    /**
     * Sets the value of the negate property.
     */
    public void setNegate(Boolean value) {
        this.negate = value;
    }

    /**
     * Gets the value of the comment property.
     */
    public String getComment() {
        return comment;
    }

    /**
     * Sets the value of the comment property.
     */
    public void setComment(String value) {
        this.comment = value;
    }

    @Override
    public boolean evaluate(TestEvaluator testEvaluator) {
        switch (operator) {
            case OR:
                return isNegate() ^ evaluateOR(testEvaluator);
            case AND:
                return isNegate() ^ evaluateAND(testEvaluator);
            case ONE:
            case XOR:
                //TODO: Implement
                return false;
        }
        return false;
    }

    private boolean evaluateOR(TestEvaluator testEvaluator) {
        for (BaseCriteria childCriteria : children) {
            if (childCriteria.evaluate(testEvaluator)) {
                return true;
            }
        }
        return false;
    }

    private boolean evaluateAND(TestEvaluator testEvaluator) {
        for (BaseCriteria childCriteria : children) {
            if (!childCriteria.evaluate(testEvaluator)) {
                return false;
            }
        }
        return true;
    }
}

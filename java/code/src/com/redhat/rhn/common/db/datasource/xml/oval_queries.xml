<datasource_modes>
    <callable-mode name="insert_definition">
        <query params="id, class, title, description, cve_name, os_family, criteria_tree, os_version">
            { call create_definition(:id, :class, :title, :description, :cve_name, :os_family, :os_version, :criteria_tree) }
        </query>
    </callable-mode>

    <callable-mode name="add_affected_platform_to_definition">
        <query params="definition_id, platform_name">
            call add_affected_platform_to_definition(:definition_id, :platform_name)
        </query>
    </callable-mode>

    <write-mode name="add_reference_to_definition">
        <query params="ref_id, definition_id, source, url">
            INSERT INTO suseOVALReference(ref_id, definition_id, source, url)
            VALUES (:ref_id, :definition_id, :source, :url)
            ON CONFLICT DO NOTHING;
        </query>
    </write-mode>

    <write-mode name="delete_affected_platforms_from_definition">
        <query params="definition_id">
            DELETE FROM suseOVALDefinitionAffectedPlatform WHERE definition_id = :definition_id;
        </query>
    </write-mode>

    <write-mode name="delete_references_from_definition">
        <query params="definition_id">
            DELETE FROM suseOVALReference WHERE definition_id = :definition_id;
        </query>
    </write-mode>

    <callable-mode name="add_product_vulnerable_package">
        <query params="package_name, fix_version, product_name, cve_name">
            call insert_product_vulnerable_packages(:package_name, :fix_version, :product_name, :cve_name)
        </query>
    </callable-mode>

    <write-mode name="insert_package_test">
        <query params="id, comment, check_exist, test_check, state_operator, isrpm, pkg_object_id, pkg_state_id">
            INSERT INTO suseOVALPackageTest(id, comment, check_exist, test_check, state_operator, isrpm, pkg_object_id,
                                            pkg_state_id)
            VALUES (:id, :comment, :check_exist, :test_check, :state_operator, :isrpm, :pkg_object_id, :pkg_state_id)
            ON CONFLICT(id) DO UPDATE
                SET comment        = EXCLUDED.comment,
                    check_exist    = EXCLUDED.check_exist,
                    test_check     = EXCLUDED.test_check,
                    state_operator = EXCLUDED.state_operator,
                    isrpm          = EXCLUDED.isrpm,
                    pkg_object_id  = EXCLUDED.pkg_object_id,
                    pkg_state_id   = EXCLUDED.pkg_state_id;

        </query>
    </write-mode>

    <write-mode name="insert_package_object">
        <query params="id, name, isrpm">
            INSERT INTO suseOVALPackageObject(id, name, isrpm)
            VALUES (:id, :name, :isrpm)
            ON CONFLICT(id) DO UPDATE
                SET name  = EXCLUDED.name,
                    isrpm = EXCLUDED.isrpm;
        </query>
    </write-mode>

    <write-mode name="insert_package_state">
        <query params="id, operator, isrpm, arch_state_id, version_state_id, evr_state_id">
            INSERT INTO suseOVALPackageState(id, operator, arch_state_id, version_state_id, evr_state_id, isrpm)
            VALUES (:id, :operator, :arch_state_id, :version_state_id, :evr_state_id, :isrpm)
            ON CONFLICT(id) DO UPDATE
            SET operator = EXCLUDED.operator,
                arch_state_id = EXCLUDED.arch_state_id,
                version_state_id = EXCLUDED.version_state_id,
                evr_state_id = EXCLUDED.evr_state_id,
                isrpm = EXCLUDED.isrpm
        </query>
    </write-mode>

    <callable-mode name="insert_package_evr_state">
        <query params="evr, operation, datatype">
            {:evrStateId = call insert_package_evr_state(:evr, :operation, :datatype)}
        </query>
    </callable-mode>

    <callable-mode name="insert_package_arch_state">
        <query params="arch, operation">
            {:archStateId = call insert_package_arch_state(:arch, :operation)}
        </query>
    </callable-mode>

    <callable-mode name="insert_package_version_state">
        <query params="version, operation">
            {:versionStateId = call insert_package_version_state(:version, :operation)}
        </query>
    </callable-mode>

    <mode name="get_vulnerable_packages">
        <query params="cve_name, product_cpe">
            SELECT vulnerablePkg.name AS vulnerablePkgName, vulnerablePkg.fix_version AS vulnerablePkgFixVersion
            FROM suseovalvulnerablepackage vulnerablePkg,
                 rhncve cve,
                 suseovalplatform platform,
                 suseovalplatformvulnerablepackage platVulnerablePkg
            WHERE cve.name = :cve_name
              AND platform.cpe = :product_cpe
              AND platVulnerablePkg.cve_id = cve.id
              AND platVulnerablePkg.platform_id = platform.id
              AND platVulnerablePkg.vulnerable_pkg_id = vulnerablePkg.id;
        </query>
    </mode>
</datasource_modes>
